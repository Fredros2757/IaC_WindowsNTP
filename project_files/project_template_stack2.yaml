heat_template_version: 2013-05-23

description: >
  HOT template to create a new neutron network plus a router to the public
  network, and for deploying two servers into the new network. The template also
  assigns floating IP addresses to each server so they are routable from the
  public network.

parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
  image_Linux:
    type: string
    description: Linux instance, manager
  image_Windows10:
    type: string
    description: Windows10 instance
  image_Windows12:
    type: string
    description: Windows12 instance
  image_Windows16:
    type: string
    description: Windows16 instance
  image_Windows19:
    type: string
    description: Windows19 instance
  flavor_small:
    type: string
    description: Small flavor to use for servers
  flavor_medium:
    type: string
    description: Medium flavor to use for servers
  flavor_large:
    type: string
    description: Large flavor to use for servers
  public_net:
    type: string
    description: >
      ID or name of public network for which floating IP addresses will be allocated
  private_net_name:
    type: string
    description: Name of private network to be created
  private_net_cidr:
    type: string
    description: Private network address (CIDR notation)
  private_net_gateway:
    type: string
    description: Private network gateway address
  private_net_pool_start:
    type: string
    description: Start of private network IP address allocation pool
  private_net_pool_end:
    type: string
    description: End of private network IP address allocation pool

resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  server1:
    type: OS::Nova::Server
    properties:
      name: puppet6_manager
      image: { get_param: image_Linux }
      flavor: { get_param: flavor_medium }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server1_port }

  server1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: [{ get_resource: server_security_group_linux }]

  server1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server1_port }

  server2:
    type: OS::Nova::Server
    properties:
      name: puppet6_Win10
      image: { get_param: image_Windows10 }
      flavor: { get_param: flavor_medium }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server2_port }

  server2_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: [{ get_resource: server_security_group_windows }]

  server2_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server2_port }

  server3:
    type: OS::Nova::Server
    properties:
      name: puppet6_Win12
      image: { get_param: image_Windows12 }
      flavor: { get_param: flavor_large }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server3_port }

  server3_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: [{ get_resource: server_security_group_windows }]

  server3_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server3_port }

  server4:
    type: OS::Nova::Server
    properties:
      name: puppet_6Win16
      image: { get_param: image_Windows16 }
      flavor: { get_param: flavor_medium }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server4_port }

  server4_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: [{ get_resource: server_security_group_windows }]

  server4_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server4_port }

  server5:
    type: OS::Nova::Server
    properties:
      name: puppet6_Win19
      image: { get_param: image_Windows19 }
      flavor: { get_param: flavor_medium }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: server5_port }

  server5_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: [{ get_resource: server_security_group_windows }]

  server5_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: server5_port }

  server_security_group_linux:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for Linux servers
      name: Linux_Secgroup_puppet6
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  server_security_group_windows:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for Windows servers
      name: Win_Secgroup_puppet6
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 3389
          port_range_max: 3389
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

outputs:
  server1_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server1, first_address ] }
  server1_public_ip:
    description: Floating IP address of server1 in public network
    value: { get_attr: [ server1_floating_ip, floating_ip_address ] }
  server2_private_ip:
    description: IP address of server2 in private network
    value: { get_attr: [ server2, first_address ] }
  server2_public_ip:
    description: Floating IP address of server2 in public network
    value: { get_attr: [ server2_floating_ip, floating_ip_address ] }
  server3_private_ip:
    description: IP address of server3 in private network
    value: { get_attr: [ server3, first_address ] }
  server3_public_ip:
    description: Floating IP address of server3 in public network
    value: { get_attr: [ server3_floating_ip, floating_ip_address ] }
  server4_private_ip:
    description: IP address of server4 in private network
    value: { get_attr: [ server4, first_address ] }
  server4_public_ip:
    description: Floating IP address of server4 in public network
    value: { get_attr: [ server4_floating_ip, floating_ip_address ] }
  server5_private_ip:
    description: IP address of server5 in private network
    value: { get_attr: [ server5, first_address ] }
  server5_public_ip:
    description: Floating IP address of server5 in public network
    value: { get_attr: [ server5_floating_ip, floating_ip_address ] }
